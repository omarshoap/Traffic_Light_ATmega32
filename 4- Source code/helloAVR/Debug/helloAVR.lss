
helloAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001b22  00001bb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800168  00800168  00001cbe  2**0
                  ALLOC
  3 .stab         000011c4  00000000  00000000  00001cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b12  00000000  00000000  00002e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00003996  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00003ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00005cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00007e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  000082cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008b7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <__vector_1>
       8:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e2       	ldi	r30, 0x22	; 34
      78:	fb e1       	ldi	r31, 0x1B	; 27
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 17 0a 	call	0x142e	; 0x142e <main>
      8a:	0c 94 8f 0d 	jmp	0x1b1e	; 0x1b1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 0d 	jmp	0x1ab0	; 0x1ab0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <DIO_PIN_DIRECTION>:
#include "BIT_MATH.h"
#include "DIO.h"


void DIO_PIN_DIRECTION(u8 port,u8 pin,u8 status)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	29 97       	sbiw	r28, 0x09	; 9
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	6a 83       	std	Y+2, r22	; 0x02
     cee:	4b 83       	std	Y+3, r20	; 0x03
	switch (status)
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	39 87       	std	Y+9, r19	; 0x09
     cf8:	28 87       	std	Y+8, r18	; 0x08
     cfa:	88 85       	ldd	r24, Y+8	; 0x08
     cfc:	99 85       	ldd	r25, Y+9	; 0x09
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	39 f0       	breq	.+14     	; 0xd10 <DIO_PIN_DIRECTION+0x3a>
     d02:	28 85       	ldd	r18, Y+8	; 0x08
     d04:	39 85       	ldd	r19, Y+9	; 0x09
     d06:	21 30       	cpi	r18, 0x01	; 1
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <DIO_PIN_DIRECTION+0x38>
     d0c:	75 c0       	rjmp	.+234    	; 0xdf8 <DIO_PIN_DIRECTION+0x122>
     d0e:	e2 c0       	rjmp	.+452    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
	{
	case INPUT:
		switch(port)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3f 83       	std	Y+7, r19	; 0x07
     d18:	2e 83       	std	Y+6, r18	; 0x06
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	59 f1       	breq	.+86     	; 0xd7a <DIO_PIN_DIRECTION+0xa4>
     d24:	2e 81       	ldd	r18, Y+6	; 0x06
     d26:	3f 81       	ldd	r19, Y+7	; 0x07
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	2c f4       	brge	.+10     	; 0xd38 <DIO_PIN_DIRECTION+0x62>
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	9f 81       	ldd	r25, Y+7	; 0x07
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	69 f0       	breq	.+26     	; 0xd50 <DIO_PIN_DIRECTION+0x7a>
     d36:	ce c0       	rjmp	.+412    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
     d38:	2e 81       	ldd	r18, Y+6	; 0x06
     d3a:	3f 81       	ldd	r19, Y+7	; 0x07
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	89 f1       	breq	.+98     	; 0xda4 <DIO_PIN_DIRECTION+0xce>
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_PIN_DIRECTION+0x78>
     d4c:	40 c0       	rjmp	.+128    	; 0xdce <DIO_PIN_DIRECTION+0xf8>
     d4e:	c2 c0       	rjmp	.+388    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA,pin);
     d50:	aa e3       	ldi	r26, 0x3A	; 58
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ea e3       	ldi	r30, 0x3A	; 58
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_PIN_DIRECTION+0x98>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_PIN_DIRECTION+0x94>
     d72:	80 95       	com	r24
     d74:	84 23       	and	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	ad c0       	rjmp	.+346    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB,pin);
     d7a:	a7 e3       	ldi	r26, 0x37	; 55
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_PIN_DIRECTION+0xc2>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_PIN_DIRECTION+0xbe>
     d9c:	80 95       	com	r24
     d9e:	84 23       	and	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	98 c0       	rjmp	.+304    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC,pin);
     da4:	a4 e3       	ldi	r26, 0x34	; 52
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e4 e3       	ldi	r30, 0x34	; 52
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_PIN_DIRECTION+0xec>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_PIN_DIRECTION+0xe8>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	83 c0       	rjmp	.+262    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD,pin);
     dce:	a1 e3       	ldi	r26, 0x31	; 49
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e1 e3       	ldi	r30, 0x31	; 49
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	48 2f       	mov	r20, r24
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 2e       	mov	r0, r18
     de6:	02 c0       	rjmp	.+4      	; 0xdec <DIO_PIN_DIRECTION+0x116>
     de8:	88 0f       	add	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	0a 94       	dec	r0
     dee:	e2 f7       	brpl	.-8      	; 0xde8 <DIO_PIN_DIRECTION+0x112>
     df0:	80 95       	com	r24
     df2:	84 23       	and	r24, r20
     df4:	8c 93       	st	X, r24
     df6:	6e c0       	rjmp	.+220    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		}
		break;

	case OUTPUT:
		switch(port)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3d 83       	std	Y+5, r19	; 0x05
     e00:	2c 83       	std	Y+4, r18	; 0x04
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	9d 81       	ldd	r25, Y+5	; 0x05
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	49 f1       	breq	.+82     	; 0xe5e <DIO_PIN_DIRECTION+0x188>
     e0c:	2c 81       	ldd	r18, Y+4	; 0x04
     e0e:	3d 81       	ldd	r19, Y+5	; 0x05
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	2c f4       	brge	.+10     	; 0xe20 <DIO_PIN_DIRECTION+0x14a>
     e16:	8c 81       	ldd	r24, Y+4	; 0x04
     e18:	9d 81       	ldd	r25, Y+5	; 0x05
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	61 f0       	breq	.+24     	; 0xe36 <DIO_PIN_DIRECTION+0x160>
     e1e:	5a c0       	rjmp	.+180    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
     e20:	2c 81       	ldd	r18, Y+4	; 0x04
     e22:	3d 81       	ldd	r19, Y+5	; 0x05
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	71 f1       	breq	.+92     	; 0xe86 <DIO_PIN_DIRECTION+0x1b0>
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	91 05       	cpc	r25, r1
     e32:	e9 f1       	breq	.+122    	; 0xeae <DIO_PIN_DIRECTION+0x1d8>
     e34:	4f c0       	rjmp	.+158    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
		{
		case DIO_PORTA:
			SET_BIT(DDRA,pin);
     e36:	aa e3       	ldi	r26, 0x3A	; 58
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ea e3       	ldi	r30, 0x3A	; 58
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_PIN_DIRECTION+0x17e>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_PIN_DIRECTION+0x17a>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	3b c0       	rjmp	.+118    	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB,pin);
     e5e:	a7 e3       	ldi	r26, 0x37	; 55
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e3       	ldi	r30, 0x37	; 55
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	48 2f       	mov	r20, r24
     e6a:	8a 81       	ldd	r24, Y+2	; 0x02
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	02 2e       	mov	r0, r18
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <DIO_PIN_DIRECTION+0x1a6>
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	0a 94       	dec	r0
     e7e:	e2 f7       	brpl	.-8      	; 0xe78 <DIO_PIN_DIRECTION+0x1a2>
     e80:	84 2b       	or	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	27 c0       	rjmp	.+78     	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC,pin);
     e86:	a4 e3       	ldi	r26, 0x34	; 52
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e4 e3       	ldi	r30, 0x34	; 52
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_PIN_DIRECTION+0x1ce>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_PIN_DIRECTION+0x1ca>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	13 c0       	rjmp	.+38     	; 0xed4 <DIO_PIN_DIRECTION+0x1fe>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD,pin);
     eae:	a1 e3       	ldi	r26, 0x31	; 49
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e1 e3       	ldi	r30, 0x31	; 49
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_PIN_DIRECTION+0x1f6>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_PIN_DIRECTION+0x1f2>
     ed0:	84 2b       	or	r24, r20
     ed2:	8c 93       	st	X, r24
			break;
		}
	}
}
     ed4:	29 96       	adiw	r28, 0x09	; 9
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_PIN_WRITE>:




void DIO_PIN_WRITE(u8 port,u8 pin,u8 status)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	29 97       	sbiw	r28, 0x09	; 9
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	de bf       	out	0x3e, r29	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	cd bf       	out	0x3d, r28	; 61
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	6a 83       	std	Y+2, r22	; 0x02
     efe:	4b 83       	std	Y+3, r20	; 0x03
	switch (status)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	39 87       	std	Y+9, r19	; 0x09
     f08:	28 87       	std	Y+8, r18	; 0x08
     f0a:	88 85       	ldd	r24, Y+8	; 0x08
     f0c:	99 85       	ldd	r25, Y+9	; 0x09
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	39 f0       	breq	.+14     	; 0xf20 <DIO_PIN_WRITE+0x3a>
     f12:	28 85       	ldd	r18, Y+8	; 0x08
     f14:	39 85       	ldd	r19, Y+9	; 0x09
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	31 05       	cpc	r19, r1
     f1a:	09 f4       	brne	.+2      	; 0xf1e <DIO_PIN_WRITE+0x38>
     f1c:	75 c0       	rjmp	.+234    	; 0x1008 <DIO_PIN_WRITE+0x122>
     f1e:	e2 c0       	rjmp	.+452    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
	{
	case LOW:
		switch(port)
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	3f 83       	std	Y+7, r19	; 0x07
     f28:	2e 83       	std	Y+6, r18	; 0x06
     f2a:	8e 81       	ldd	r24, Y+6	; 0x06
     f2c:	9f 81       	ldd	r25, Y+7	; 0x07
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	91 05       	cpc	r25, r1
     f32:	59 f1       	breq	.+86     	; 0xf8a <DIO_PIN_WRITE+0xa4>
     f34:	2e 81       	ldd	r18, Y+6	; 0x06
     f36:	3f 81       	ldd	r19, Y+7	; 0x07
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	2c f4       	brge	.+10     	; 0xf48 <DIO_PIN_WRITE+0x62>
     f3e:	8e 81       	ldd	r24, Y+6	; 0x06
     f40:	9f 81       	ldd	r25, Y+7	; 0x07
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f0       	breq	.+26     	; 0xf60 <DIO_PIN_WRITE+0x7a>
     f46:	ce c0       	rjmp	.+412    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
     f48:	2e 81       	ldd	r18, Y+6	; 0x06
     f4a:	3f 81       	ldd	r19, Y+7	; 0x07
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	89 f1       	breq	.+98     	; 0xfb4 <DIO_PIN_WRITE+0xce>
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	9f 81       	ldd	r25, Y+7	; 0x07
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	91 05       	cpc	r25, r1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <DIO_PIN_WRITE+0x78>
     f5c:	40 c0       	rjmp	.+128    	; 0xfde <DIO_PIN_WRITE+0xf8>
     f5e:	c2 c0       	rjmp	.+388    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA,pin);
     f60:	ab e3       	ldi	r26, 0x3B	; 59
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	eb e3       	ldi	r30, 0x3B	; 59
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_PIN_WRITE+0x98>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_PIN_WRITE+0x94>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	ad c0       	rjmp	.+346    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB,pin);
     f8a:	a8 e3       	ldi	r26, 0x38	; 56
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e8 e3       	ldi	r30, 0x38	; 56
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_PIN_WRITE+0xc2>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_PIN_WRITE+0xbe>
     fac:	80 95       	com	r24
     fae:	84 23       	and	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	98 c0       	rjmp	.+304    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC,pin);
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_PIN_WRITE+0xec>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_PIN_WRITE+0xe8>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	83 c0       	rjmp	.+262    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD,pin);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_PIN_WRITE+0x116>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <DIO_PIN_WRITE+0x112>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	6e c0       	rjmp	.+220    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		}
		break;

	case HIGH:
		switch(port)
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	8c 81       	ldd	r24, Y+4	; 0x04
    1014:	9d 81       	ldd	r25, Y+5	; 0x05
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	91 05       	cpc	r25, r1
    101a:	49 f1       	breq	.+82     	; 0x106e <DIO_PIN_WRITE+0x188>
    101c:	2c 81       	ldd	r18, Y+4	; 0x04
    101e:	3d 81       	ldd	r19, Y+5	; 0x05
    1020:	22 30       	cpi	r18, 0x02	; 2
    1022:	31 05       	cpc	r19, r1
    1024:	2c f4       	brge	.+10     	; 0x1030 <DIO_PIN_WRITE+0x14a>
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	61 f0       	breq	.+24     	; 0x1046 <DIO_PIN_WRITE+0x160>
    102e:	5a c0       	rjmp	.+180    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	71 f1       	breq	.+92     	; 0x1096 <DIO_PIN_WRITE+0x1b0>
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	83 30       	cpi	r24, 0x03	; 3
    1040:	91 05       	cpc	r25, r1
    1042:	e9 f1       	breq	.+122    	; 0x10be <DIO_PIN_WRITE+0x1d8>
    1044:	4f c0       	rjmp	.+158    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
		{
		case DIO_PORTA:
			SET_BIT(PORTA,pin);
    1046:	ab e3       	ldi	r26, 0x3B	; 59
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e3       	ldi	r30, 0x3B	; 59
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_PIN_WRITE+0x17e>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_PIN_WRITE+0x17a>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	3b c0       	rjmp	.+118    	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB,pin);
    106e:	a8 e3       	ldi	r26, 0x38	; 56
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e8 e3       	ldi	r30, 0x38	; 56
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_PIN_WRITE+0x1a6>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_PIN_WRITE+0x1a2>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	27 c0       	rjmp	.+78     	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC,pin);
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_PIN_WRITE+0x1ce>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_PIN_WRITE+0x1ca>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	13 c0       	rjmp	.+38     	; 0x10e4 <DIO_PIN_WRITE+0x1fe>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD,pin);
    10be:	a2 e3       	ldi	r26, 0x32	; 50
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e2 e3       	ldi	r30, 0x32	; 50
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_PIN_WRITE+0x1f6>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_PIN_WRITE+0x1f2>
    10e0:	84 2b       	or	r24, r20
    10e2:	8c 93       	st	X, r24
			break;
		}
	}
}
    10e4:	29 96       	adiw	r28, 0x09	; 9
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <DIO_PIN_READ>:

u8 DIO_PIN_READ(u8 port,u8 pin)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <DIO_PIN_READ+0x6>
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <DIO_PIN_READ+0x8>
    10fe:	0f 92       	push	r0
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
    1108:	19 82       	std	Y+1, r1	; 0x01

		switch(port)
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3d 83       	std	Y+5, r19	; 0x05
    1112:	2c 83       	std	Y+4, r18	; 0x04
    1114:	4c 81       	ldd	r20, Y+4	; 0x04
    1116:	5d 81       	ldd	r21, Y+5	; 0x05
    1118:	41 30       	cpi	r20, 0x01	; 1
    111a:	51 05       	cpc	r21, r1
    111c:	41 f1       	breq	.+80     	; 0x116e <DIO_PIN_READ+0x78>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	91 05       	cpc	r25, r1
    1126:	34 f4       	brge	.+12     	; 0x1134 <DIO_PIN_READ+0x3e>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	61 f0       	breq	.+24     	; 0x114a <DIO_PIN_READ+0x54>
    1132:	52 c0       	rjmp	.+164    	; 0x11d8 <DIO_PIN_READ+0xe2>
    1134:	4c 81       	ldd	r20, Y+4	; 0x04
    1136:	5d 81       	ldd	r21, Y+5	; 0x05
    1138:	42 30       	cpi	r20, 0x02	; 2
    113a:	51 05       	cpc	r21, r1
    113c:	51 f1       	breq	.+84     	; 0x1192 <DIO_PIN_READ+0x9c>
    113e:	8c 81       	ldd	r24, Y+4	; 0x04
    1140:	9d 81       	ldd	r25, Y+5	; 0x05
    1142:	83 30       	cpi	r24, 0x03	; 3
    1144:	91 05       	cpc	r25, r1
    1146:	b9 f1       	breq	.+110    	; 0x11b6 <DIO_PIN_READ+0xc0>
    1148:	47 c0       	rjmp	.+142    	; 0x11d8 <DIO_PIN_READ+0xe2>
		{
		case DIO_PORTA:
			value = GET_BIT(PINA,pin);
    114a:	e9 e3       	ldi	r30, 0x39	; 57
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <DIO_PIN_READ+0x6c>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <DIO_PIN_READ+0x68>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    116c:	35 c0       	rjmp	.+106    	; 0x11d8 <DIO_PIN_READ+0xe2>
			break;
		case DIO_PORTB:
			value = GET_BIT(PINB,pin);
    116e:	e6 e3       	ldi	r30, 0x36	; 54
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	28 2f       	mov	r18, r24
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a9 01       	movw	r20, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_PIN_READ+0x90>
    1182:	55 95       	asr	r21
    1184:	47 95       	ror	r20
    1186:	8a 95       	dec	r24
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_PIN_READ+0x8c>
    118a:	ca 01       	movw	r24, r20
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	23 c0       	rjmp	.+70     	; 0x11d8 <DIO_PIN_READ+0xe2>
			break;
		case DIO_PORTC:
			value = GET_BIT(PINC,pin);
    1192:	e3 e3       	ldi	r30, 0x33	; 51
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_PIN_READ+0xb4>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_PIN_READ+0xb0>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <DIO_PIN_READ+0xe2>
			break;
		case DIO_PORTD:
			value = GET_BIT(PIND,pin);
    11b6:	e0 e3       	ldi	r30, 0x30	; 48
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <DIO_PIN_READ+0xd8>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <DIO_PIN_READ+0xd4>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		return value;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DIO_PIN_TOG>:

void DIO_PIN_TOG(u8 port,u8 pin)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_PIN_TOG+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_PIN_TOG+0x8>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	3c 83       	std	Y+4, r19	; 0x04
    1202:	2b 83       	std	Y+3, r18	; 0x03
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	91 05       	cpc	r25, r1
    120c:	49 f1       	breq	.+82     	; 0x1260 <DIO_PIN_TOG+0x76>
    120e:	2b 81       	ldd	r18, Y+3	; 0x03
    1210:	3c 81       	ldd	r19, Y+4	; 0x04
    1212:	22 30       	cpi	r18, 0x02	; 2
    1214:	31 05       	cpc	r19, r1
    1216:	2c f4       	brge	.+10     	; 0x1222 <DIO_PIN_TOG+0x38>
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	00 97       	sbiw	r24, 0x00	; 0
    121e:	61 f0       	breq	.+24     	; 0x1238 <DIO_PIN_TOG+0x4e>
    1220:	5a c0       	rjmp	.+180    	; 0x12d6 <DIO_PIN_TOG+0xec>
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	22 30       	cpi	r18, 0x02	; 2
    1228:	31 05       	cpc	r19, r1
    122a:	71 f1       	breq	.+92     	; 0x1288 <DIO_PIN_TOG+0x9e>
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	83 30       	cpi	r24, 0x03	; 3
    1232:	91 05       	cpc	r25, r1
    1234:	e9 f1       	breq	.+122    	; 0x12b0 <DIO_PIN_TOG+0xc6>
    1236:	4f c0       	rjmp	.+158    	; 0x12d6 <DIO_PIN_TOG+0xec>
		{
		case DIO_PORTA:
			TOG_BIT(PORTA,pin);
    1238:	ab e3       	ldi	r26, 0x3B	; 59
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	eb e3       	ldi	r30, 0x3B	; 59
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_PIN_TOG+0x6c>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_PIN_TOG+0x68>
    125a:	84 27       	eor	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	3b c0       	rjmp	.+118    	; 0x12d6 <DIO_PIN_TOG+0xec>
			break;
		case DIO_PORTB:
			TOG_BIT(PORTB,pin);
    1260:	a8 e3       	ldi	r26, 0x38	; 56
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	48 2f       	mov	r20, r24
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	02 2e       	mov	r0, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <DIO_PIN_TOG+0x94>
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	0a 94       	dec	r0
    1280:	e2 f7       	brpl	.-8      	; 0x127a <DIO_PIN_TOG+0x90>
    1282:	84 27       	eor	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	27 c0       	rjmp	.+78     	; 0x12d6 <DIO_PIN_TOG+0xec>
			break;
		case DIO_PORTC:
			TOG_BIT(PORTC,pin);
    1288:	a5 e3       	ldi	r26, 0x35	; 53
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e5 e3       	ldi	r30, 0x35	; 53
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_PIN_TOG+0xbc>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_PIN_TOG+0xb8>
    12aa:	84 27       	eor	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	13 c0       	rjmp	.+38     	; 0x12d6 <DIO_PIN_TOG+0xec>
			break;
		case DIO_PORTD:
			TOG_BIT(PORTD,pin);
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_PIN_TOG+0xe4>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_PIN_TOG+0xe0>
    12d2:	84 27       	eor	r24, r20
    12d4:	8c 93       	st	X, r24
			break;
		}
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <DIO_PORT_DIRECTION>:



void DIO_PORT_DIRECTION(u8 port,u8 value)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <DIO_PORT_DIRECTION+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <DIO_PORT_DIRECTION+0x8>
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	3c 83       	std	Y+4, r19	; 0x04
    12fc:	2b 83       	std	Y+3, r18	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	91 05       	cpc	r25, r1
    1306:	d1 f0       	breq	.+52     	; 0x133c <DIO_PORT_DIRECTION+0x58>
    1308:	2b 81       	ldd	r18, Y+3	; 0x03
    130a:	3c 81       	ldd	r19, Y+4	; 0x04
    130c:	22 30       	cpi	r18, 0x02	; 2
    130e:	31 05       	cpc	r19, r1
    1310:	2c f4       	brge	.+10     	; 0x131c <DIO_PORT_DIRECTION+0x38>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	00 97       	sbiw	r24, 0x00	; 0
    1318:	61 f0       	breq	.+24     	; 0x1332 <DIO_PORT_DIRECTION+0x4e>
    131a:	1e c0       	rjmp	.+60     	; 0x1358 <DIO_PORT_DIRECTION+0x74>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	81 f0       	breq	.+32     	; 0x1346 <DIO_PORT_DIRECTION+0x62>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	91 05       	cpc	r25, r1
    132e:	81 f0       	breq	.+32     	; 0x1350 <DIO_PORT_DIRECTION+0x6c>
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <DIO_PORT_DIRECTION+0x74>
	{
	case DIO_PORTA:
		DDRA = value;
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <DIO_PORT_DIRECTION+0x74>
		break;
	case DIO_PORTB:
		DDRB = value;
    133c:	e7 e3       	ldi	r30, 0x37	; 55
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	80 83       	st	Z, r24
    1344:	09 c0       	rjmp	.+18     	; 0x1358 <DIO_PORT_DIRECTION+0x74>
			break;
	case DIO_PORTC:
		DDRC = value;
    1346:	e4 e3       	ldi	r30, 0x34	; 52
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <DIO_PORT_DIRECTION+0x74>
			break;
	case DIO_PORTD:
		DDRD = value;
    1350:	e1 e3       	ldi	r30, 0x31	; 49
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
			break;

	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_PORT_WRITE>:

void DIO_PORT_WRITE(u8 port,u8 value)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_PORT_WRITE+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_PORT_WRITE+0x8>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	6a 83       	std	Y+2, r22	; 0x02

	switch(port)
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	3c 83       	std	Y+4, r19	; 0x04
    137e:	2b 83       	std	Y+3, r18	; 0x03
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	91 05       	cpc	r25, r1
    1388:	d1 f0       	breq	.+52     	; 0x13be <DIO_PORT_WRITE+0x58>
    138a:	2b 81       	ldd	r18, Y+3	; 0x03
    138c:	3c 81       	ldd	r19, Y+4	; 0x04
    138e:	22 30       	cpi	r18, 0x02	; 2
    1390:	31 05       	cpc	r19, r1
    1392:	2c f4       	brge	.+10     	; 0x139e <DIO_PORT_WRITE+0x38>
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	61 f0       	breq	.+24     	; 0x13b4 <DIO_PORT_WRITE+0x4e>
    139c:	1e c0       	rjmp	.+60     	; 0x13da <DIO_PORT_WRITE+0x74>
    139e:	2b 81       	ldd	r18, Y+3	; 0x03
    13a0:	3c 81       	ldd	r19, Y+4	; 0x04
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	81 f0       	breq	.+32     	; 0x13c8 <DIO_PORT_WRITE+0x62>
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	91 05       	cpc	r25, r1
    13b0:	81 f0       	breq	.+32     	; 0x13d2 <DIO_PORT_WRITE+0x6c>
    13b2:	13 c0       	rjmp	.+38     	; 0x13da <DIO_PORT_WRITE+0x74>
	{
	case DIO_PORTA:
		PORTA = value;
    13b4:	eb e3       	ldi	r30, 0x3B	; 59
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	80 83       	st	Z, r24
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <DIO_PORT_WRITE+0x74>
		break;
	case DIO_PORTB:
		PORTB = value;
    13be:	e8 e3       	ldi	r30, 0x38	; 56
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	80 83       	st	Z, r24
    13c6:	09 c0       	rjmp	.+18     	; 0x13da <DIO_PORT_WRITE+0x74>
			break;
	case DIO_PORTC:
		PORTC = value;
    13c8:	e5 e3       	ldi	r30, 0x35	; 53
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	80 83       	st	Z, r24
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <DIO_PORT_WRITE+0x74>
			break;
	case DIO_PORTD:
		PORTD = value;
    13d2:	e2 e3       	ldi	r30, 0x32	; 50
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	80 83       	st	Z, r24
			break;

	}
}
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <EXT_INT_0_INIT>:

#include "BIT_MATH.h"
#include "REG.h"

void EXT_INT_0_INIT(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);        /*_TO_ENABLE_THE_GLOBAL_INT_*/
    13f0:	af e5       	ldi	r26, 0x5F	; 95
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ef e5       	ldi	r30, 0x5F	; 95
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 68       	ori	r24, 0x80	; 128
    13fc:	8c 93       	st	X, r24
	SET_BIT(GICR,6);        /*_TO_ENABLE_INT_0_*/
    13fe:	ab e5       	ldi	r26, 0x5B	; 91
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	eb e5       	ldi	r30, 0x5B	; 91
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 64       	ori	r24, 0x40	; 64
    140a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);       /* to make interrupt with FALLING edge*/
    140c:	a5 e5       	ldi	r26, 0x55	; 85
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e5 e5       	ldi	r30, 0x55	; 85
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8e 7f       	andi	r24, 0xFE	; 254
    1418:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);       /*                //                  */
    141a:	a5 e5       	ldi	r26, 0x55	; 85
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e5 e5       	ldi	r30, 0x55	; 85
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	8c 93       	st	X, r24
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <main>:
void NS_RED_EW_YELLOW(void);                // Handle EW yellow state
void PedestrianSignal(void);                // Control pedestrian signals
void Ped_Button_Init(void);                 // Initialize pedestrian button
void NS_RED_EW_RED(void);                   // All-red safety state

int main() {
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <main+0x6>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <main+0x8>
    1436:	0f 92       	push	r0
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	// Initialize all pins for traffic lights
	TrafficLight_Init();
    143c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <TrafficLight_Init>
	Ped_Button_Init();
    1440:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Ped_Button_Init>
	// vars definitions
	TrafficState_t currentState = NS_Green_EW_Red;
    1444:	19 82       	std	Y+1, r1	; 0x01
	pedestrianModeActive = 0; // Flag for pedestrian mode
    1446:	10 92 68 01 	sts	0x0168, r1
	 // | NS -> Green          | Traffic light transitions to yellow, then red, pedestrian signal turns green, cycle resumes.          |
	 */

	while (1) {

		if (pedestrianModeActive == 1) {
    144a:	80 91 68 01 	lds	r24, 0x0168
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	09 f0       	breq	.+2      	; 0x1454 <main+0x26>
    1452:	45 c0       	rjmp	.+138    	; 0x14de <main+0xb0>
			switch (currentState) {
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	e9 f0       	breq	.+58     	; 0x14a2 <main+0x74>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	2c f4       	brge	.+10     	; 0x147c <main+0x4e>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	61 f0       	breq	.+24     	; 0x1492 <main+0x64>
    147a:	e7 cf       	rjmp	.-50     	; 0x144a <main+0x1c>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	c9 f0       	breq	.+50     	; 0x14b8 <main+0x8a>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	e9 f0       	breq	.+58     	; 0x14ca <main+0x9c>
    1490:	dc cf       	rjmp	.-72     	; 0x144a <main+0x1c>
			case NS_Green_EW_Red: // PED_STATE_1
				// we came here as [NS_Red_EW_Yellow()] = Step 4 [in normal mode] finished, which bring us here ,
				// so [NS_Green_EW_Red()] need to be executed but as we in PED mode we ignore the green part in
				// NS_Green_EW_Red by making it RED_RED transition to red All for pedestrian mode
				NS_RED_EW_RED(); // Set red for all directions
    1492:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <NS_RED_EW_RED>
				PedestrianSignal(); // Activate pedestrian signal
    1496:	0e 94 0c 0b 	call	0x1618	; 0x1618 <PedestrianSignal>
				pedestrianModeActive = 0; // Reset pedestrian mode flag
    149a:	10 92 68 01 	sts	0x0168, r1
				currentState = NS_Green_EW_Red;
    149e:	19 82       	std	Y+1, r1	; 0x01
    14a0:	d4 cf       	rjmp	.-88     	; 0x144a <main+0x1c>
				break;
			case NS_Yellow_EW_Red: // PED_STATE_2
				// we came here as [NS_Green_EW_Red()] = Step 1 [in normal mode] finished, which bring us here ,
				// so [NS_Yellow_EW_Red()] need to be excuted > and this comply with the adaption concept for ped mode pattern transition
				NS_YELLOW_EW_RED();
    14a2:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <NS_YELLOW_EW_RED>
				NS_RED_EW_RED();
    14a6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <NS_RED_EW_RED>
				PedestrianSignal();
    14aa:	0e 94 0c 0b 	call	0x1618	; 0x1618 <PedestrianSignal>
				pedestrianModeActive = 0;
    14ae:	10 92 68 01 	sts	0x0168, r1
				currentState = NS_Red_EW_Green;
    14b2:	82 e0       	ldi	r24, 0x02	; 2
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	c9 cf       	rjmp	.-110    	; 0x144a <main+0x1c>
				break;
			case NS_Red_EW_Green: // PED_STATE_3
				// we came here as [NS_Yellow_EW_Red()] = Step 2 [in normal mode] finished, which bring us here ,
				// so [NS_Red_EW_Green()] need to be excuted but as we in PED mode we ignore the green part in
				// NS_Red_EW_Green by making it RED_RED transition to red All for pedestrian mode
				NS_RED_EW_RED();
    14b8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <NS_RED_EW_RED>
				PedestrianSignal();
    14bc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <PedestrianSignal>
				pedestrianModeActive = 0;
    14c0:	10 92 68 01 	sts	0x0168, r1
				currentState = NS_Red_EW_Green;
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	c0 cf       	rjmp	.-128    	; 0x144a <main+0x1c>
				break;
			case NS_Red_EW_Yellow: // PED_STATE_4
				// we came here as [NS_Red_EW_Green()] = Step 3 [in normal mode] finished, which bring us here ,
				// so [NS_RED_EW_YELLOW()] need to be excuted > and this comply with the adaption concept for ped mode pattern transition
				NS_RED_EW_YELLOW();
    14ca:	0e 94 a6 0b 	call	0x174c	; 0x174c <NS_RED_EW_YELLOW>
				NS_RED_EW_RED();
    14ce:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <NS_RED_EW_RED>
				PedestrianSignal();
    14d2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <PedestrianSignal>
				pedestrianModeActive = 0;
    14d6:	10 92 68 01 	sts	0x0168, r1
				currentState = NS_Green_EW_Red;
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	b6 cf       	rjmp	.-148    	; 0x144a <main+0x1c>
			 // | Step 3| NS -> Red   , EW -> Green  | East-West traffic flows while North-South traffic is stopped.    | NS_RED_EW_GREEN()  |
			 // | Step 4| NS -> Red   , EW -> Yellow | East-West traffic prepares to stop; North-South remains stopped. | NS_RED_EW_YELLOW() |
			 // | Step 5| NS -> Green , EW -> Red    | Cycle repeats from Step 1 to maintain continuous traffic flow.   | NS_GREEN_EW_RED()  |
			 */

			switch (currentState) {
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3b 83       	std	Y+3, r19	; 0x03
    14e6:	2a 83       	std	Y+2, r18	; 0x02
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	d1 f0       	breq	.+52     	; 0x1526 <main+0xf8>
    14f2:	2a 81       	ldd	r18, Y+2	; 0x02
    14f4:	3b 81       	ldd	r19, Y+3	; 0x03
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	2c f4       	brge	.+10     	; 0x1506 <main+0xd8>
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	61 f0       	breq	.+24     	; 0x151c <main+0xee>
    1504:	a2 cf       	rjmp	.-188    	; 0x144a <main+0x1c>
    1506:	2a 81       	ldd	r18, Y+2	; 0x02
    1508:	3b 81       	ldd	r19, Y+3	; 0x03
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	81 f0       	breq	.+32     	; 0x1530 <main+0x102>
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	91 05       	cpc	r25, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <main+0x10c>
    151a:	97 cf       	rjmp	.-210    	; 0x144a <main+0x1c>
			case NS_Green_EW_Red:
				// Step 1: North-South Green, East-West Red
				NS_GREEN_EW_RED();
    151c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <NS_GREEN_EW_RED>
				currentState = NS_Yellow_EW_Red;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	92 cf       	rjmp	.-220    	; 0x144a <main+0x1c>
				break;

			case NS_Yellow_EW_Red:
				// Step 2: North-South Yellow, East-West Red
				NS_YELLOW_EW_RED();
    1526:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <NS_YELLOW_EW_RED>
				currentState = NS_Red_EW_Green;
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	8d cf       	rjmp	.-230    	; 0x144a <main+0x1c>
				break;

			case NS_Red_EW_Green:
				// Step 3: North-South Red, East-West Green
				NS_RED_EW_GREEN();
    1530:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <NS_RED_EW_GREEN>
				currentState = NS_Red_EW_Yellow;
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	88 cf       	rjmp	.-240    	; 0x144a <main+0x1c>
				break;

			case NS_Red_EW_Yellow:
				// Step 4: North-South Red, East-West Yellow
				NS_RED_EW_YELLOW();
    153a:	0e 94 a6 0b 	call	0x174c	; 0x174c <NS_RED_EW_YELLOW>
				currentState = NS_Green_EW_Red;
    153e:	19 82       	std	Y+1, r1	; 0x01
    1540:	84 cf       	rjmp	.-248    	; 0x144a <main+0x1c>

00001542 <TrafficLight_Init>:
		}
	}
}

// Initialize traffic light pins as output
void TrafficLight_Init(void) {
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	DIO_PIN_DIRECTION(DIO_PORTB, 0, OUTPUT);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTB, 1, OUTPUT);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	41 e0       	ldi	r20, 0x01	; 1
    155a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTB, 2, OUTPUT);
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	62 e0       	ldi	r22, 0x02	; 2
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>

	DIO_PIN_DIRECTION(DIO_PORTB, 3, OUTPUT);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	63 e0       	ldi	r22, 0x03	; 3
    156c:	41 e0       	ldi	r20, 0x01	; 1
    156e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTB, 4, OUTPUT);
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	64 e0       	ldi	r22, 0x04	; 4
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTB, 5, OUTPUT);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	65 e0       	ldi	r22, 0x05	; 5
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>

	DIO_PIN_DIRECTION(DIO_PORTC, 2, OUTPUT);
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	62 e0       	ldi	r22, 0x02	; 2
    158a:	41 e0       	ldi	r20, 0x01	; 1
    158c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTC, 3, OUTPUT);
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	63 e0       	ldi	r22, 0x03	; 3
    1594:	41 e0       	ldi	r20, 0x01	; 1
    1596:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>

}
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <Ped_Button_Init>:
// Initialize pedestrian button pins as output
void Ped_Button_Init(void) {
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	// Set INT0 (PD2) and INT1 (PD3) as input pins
	DIO_PIN_DIRECTION(DIO_PORTD, 2, INPUT);
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	62 e0       	ldi	r22, 0x02	; 2
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>
	DIO_PIN_DIRECTION(DIO_PORTD, 3, INPUT);
    15b2:	83 e0       	ldi	r24, 0x03	; 3
    15b4:	63 e0       	ldi	r22, 0x03	; 3
    15b6:	40 e0       	ldi	r20, 0x00	; 0
    15b8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_PIN_DIRECTION>

	// Configure INT0 to trigger on the falling edge
	MCUCR |= (1 << ISC01);   // Set ISC01
    15bc:	a5 e5       	ldi	r26, 0x55	; 85
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e5       	ldi	r30, 0x55	; 85
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	82 60       	ori	r24, 0x02	; 2
    15c8:	8c 93       	st	X, r24
	MCUCR &= ~(1 << ISC00);  // Clear ISC00
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8e 7f       	andi	r24, 0xFE	; 254
    15d6:	8c 93       	st	X, r24

	// Configure INT1 to trigger on the falling edge
	MCUCR |= (1 << ISC11);   // Set ISC11
    15d8:	a5 e5       	ldi	r26, 0x55	; 85
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	e5 e5       	ldi	r30, 0x55	; 85
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	88 60       	ori	r24, 0x08	; 8
    15e4:	8c 93       	st	X, r24
	MCUCR &= ~(1 << ISC10);  // Clear ISC10
    15e6:	a5 e5       	ldi	r26, 0x55	; 85
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e5       	ldi	r30, 0x55	; 85
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	8b 7f       	andi	r24, 0xFB	; 251
    15f2:	8c 93       	st	X, r24

	// Enable INT0 and INT1 interrupts in the GICR register
	GICR |= (1 << INT0);     // Enable INT0
    15f4:	ab e5       	ldi	r26, 0x5B	; 91
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	eb e5       	ldi	r30, 0x5B	; 91
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	80 64       	ori	r24, 0x40	; 64
    1600:	8c 93       	st	X, r24
	GICR |= (1 << INT1);     // Enable INT1
    1602:	ab e5       	ldi	r26, 0x5B	; 91
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e5       	ldi	r30, 0x5B	; 91
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 68       	ori	r24, 0x80	; 128
    160e:	8c 93       	st	X, r24

	// Enable global interrupts
	sei();
    1610:	78 94       	sei

}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <PedestrianSignal>:

// Pedestrian mode function
void PedestrianSignal() {
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
// Turn on pedestrian signal (example: PORTD, pin 3)
	DIO_PIN_WRITE(DIO_PORTC, 2, HIGH); // Pedestrian green
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	62 e0       	ldi	r22, 0x02	; 2
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTC, 3, HIGH); // Pedestrian green
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	63 e0       	ldi	r22, 0x03	; 3
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	long_delay(PED_CROSS_TIME); // Allow pedestrians to cross
    1634:	88 eb       	ldi	r24, 0xB8	; 184
    1636:	9b e0       	ldi	r25, 0x0B	; 11
    1638:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
	DIO_PIN_WRITE(DIO_PORTC, 2, LOW);  // Pedestrian signal off
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	62 e0       	ldi	r22, 0x02	; 2
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTC, 3, LOW); // Pedestrian green
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	63 e0       	ldi	r22, 0x03	; 3
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

}
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <NS_GREEN_EW_RED>:

// North-South Green, East-West Red
void NS_GREEN_EW_RED(void) {
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
// North-South: Green ON, Yellow OFF, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 0, HIGH);
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	41 e0       	ldi	r20, 0x01	; 1
    1664:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, LOW);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, LOW);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	62 e0       	ldi	r22, 0x02	; 2
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 3, LOW);
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	40 e0       	ldi	r20, 0x00	; 0
    1682:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, LOW);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	64 e0       	ldi	r22, 0x04	; 4
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, HIGH);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	65 e0       	ldi	r22, 0x05	; 5
    1694:	41 e0       	ldi	r20, 0x01	; 1
    1696:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

	long_delay(GREEN_TIME);
    169a:	88 eb       	ldi	r24, 0xB8	; 184
    169c:	9b e0       	ldi	r25, 0x0B	; 11
    169e:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <NS_YELLOW_EW_RED>:

// North-South yellow, East-West Red
void NS_YELLOW_EW_RED(void) {
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
// North-South: Green OFF, Yellow ON, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 0, LOW);
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	60 e0       	ldi	r22, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, HIGH);
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, LOW);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	62 e0       	ldi	r22, 0x02	; 2
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 3, LOW);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	63 e0       	ldi	r22, 0x03	; 3
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, LOW);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, HIGH);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	65 e0       	ldi	r22, 0x05	; 5
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

	long_delay(YELLOW_TIME);
    16ec:	88 ee       	ldi	r24, 0xE8	; 232
    16ee:	93 e0       	ldi	r25, 0x03	; 3
    16f0:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <NS_RED_EW_GREEN>:

// North-South red, East-West green
void NS_RED_EW_GREEN(void) {
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
// North-South: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 0, LOW);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	60 e0       	ldi	r22, 0x00	; 0
    1706:	40 e0       	ldi	r20, 0x00	; 0
    1708:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, LOW);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, HIGH);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	41 e0       	ldi	r20, 0x01	; 1
    171c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green ON, Yellow OFF, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 3, HIGH);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	63 e0       	ldi	r22, 0x03	; 3
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, LOW);
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	64 e0       	ldi	r22, 0x04	; 4
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, LOW);
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

	long_delay(GREEN_TIME);
    173e:	88 eb       	ldi	r24, 0xB8	; 184
    1740:	9b e0       	ldi	r25, 0x0B	; 11
    1742:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	08 95       	ret

0000174c <NS_RED_EW_YELLOW>:

// North-South red, East-West yellow
void NS_RED_EW_YELLOW(void) {
    174c:	df 93       	push	r29
    174e:	cf 93       	push	r28
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62

// North-South: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 0, LOW);
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, LOW);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	61 e0       	ldi	r22, 0x01	; 1
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	62 e0       	ldi	r22, 0x02	; 2
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green OFF, Yellow ON, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 3, LOW);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, HIGH);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	64 e0       	ldi	r22, 0x04	; 4
    1780:	41 e0       	ldi	r20, 0x01	; 1
    1782:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, LOW);
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	65 e0       	ldi	r22, 0x05	; 5
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

	long_delay(YELLOW_TIME);
    1790:	88 ee       	ldi	r24, 0xE8	; 232
    1792:	93 e0       	ldi	r25, 0x03	; 3
    1794:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <NS_OFF_EW_OFF>:

void NS_OFF_EW_OFF(void) {
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
// North-South: Green ON, Yellow OFF, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 0, LOW);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, LOW);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	61 e0       	ldi	r22, 0x01	; 1
    17b4:	40 e0       	ldi	r20, 0x00	; 0
    17b6:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, LOW);
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	62 e0       	ldi	r22, 0x02	; 2
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green OFF, Yellow OFF, Red OFF
	DIO_PIN_WRITE(DIO_PORTB, 3, LOW);
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	63 e0       	ldi	r22, 0x03	; 3
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, LOW);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	64 e0       	ldi	r22, 0x04	; 4
    17d2:	40 e0       	ldi	r20, 0x00	; 0
    17d4:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, LOW);
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	65 e0       	ldi	r22, 0x05	; 5
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	long_delay(OFF_OFF_ALL_TIME);
    17e2:	84 ef       	ldi	r24, 0xF4	; 244
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <NS_RED_EW_RED>:

void NS_RED_EW_RED(void) {
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
// North-South: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 0, LOW);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 1, LOW);
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 2, HIGH);
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	62 e0       	ldi	r22, 0x02	; 2
    1810:	41 e0       	ldi	r20, 0x01	; 1
    1812:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>

// East-West: Green OFF, Yellow OFF, Red ON
	DIO_PIN_WRITE(DIO_PORTB, 3, LOW);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	63 e0       	ldi	r22, 0x03	; 3
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 4, LOW);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	DIO_PIN_WRITE(DIO_PORTB, 5, HIGH);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	65 e0       	ldi	r22, 0x05	; 5
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 73 07 	call	0xee6	; 0xee6 <DIO_PIN_WRITE>
	long_delay(RED_RED_ALL_TIME);
    1834:	84 e6       	ldi	r24, 0x64	; 100
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 21 0c 	call	0x1842	; 0x1842 <long_delay>
}
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <long_delay>:

void long_delay(uint16_t time_ms) {
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	6e 97       	sbiw	r28, 0x1e	; 30
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	9e 8f       	std	Y+30, r25	; 0x1e
    1858:	8d 8f       	std	Y+29, r24	; 0x1d
    185a:	78 c0       	rjmp	.+240    	; 0x194c <long_delay+0x10a>
	while (time_ms > 100) {
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a8 ec       	ldi	r26, 0xC8	; 200
    1862:	b2 e4       	ldi	r27, 0x42	; 66
    1864:	89 8f       	std	Y+25, r24	; 0x19
    1866:	9a 8f       	std	Y+26, r25	; 0x1a
    1868:	ab 8f       	std	Y+27, r26	; 0x1b
    186a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186c:	69 8d       	ldd	r22, Y+25	; 0x19
    186e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1870:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1872:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8d 8b       	std	Y+21, r24	; 0x15
    1886:	9e 8b       	std	Y+22, r25	; 0x16
    1888:	af 8b       	std	Y+23, r26	; 0x17
    188a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    188c:	6d 89       	ldd	r22, Y+21	; 0x15
    188e:	7e 89       	ldd	r23, Y+22	; 0x16
    1890:	8f 89       	ldd	r24, Y+23	; 0x17
    1892:	98 8d       	ldd	r25, Y+24	; 0x18
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <long_delay+0x6c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9c 8b       	std	Y+20, r25	; 0x14
    18aa:	8b 8b       	std	Y+19, r24	; 0x13
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <long_delay+0xea>
	else if (__tmp > 65535)
    18ae:	6d 89       	ldd	r22, Y+21	; 0x15
    18b0:	7e 89       	ldd	r23, Y+22	; 0x16
    18b2:	8f 89       	ldd	r24, Y+23	; 0x17
    18b4:	98 8d       	ldd	r25, Y+24	; 0x18
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	3f ef       	ldi	r19, 0xFF	; 255
    18ba:	4f e7       	ldi	r20, 0x7F	; 127
    18bc:	57 e4       	ldi	r21, 0x47	; 71
    18be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	4c f5       	brge	.+82     	; 0x1918 <long_delay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c6:	69 8d       	ldd	r22, Y+25	; 0x19
    18c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	51 e4       	ldi	r21, 0x41	; 65
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9c 8b       	std	Y+20, r25	; 0x14
    18ec:	8b 8b       	std	Y+19, r24	; 0x13
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <long_delay+0xcc>
    18f0:	88 ec       	ldi	r24, 0xC8	; 200
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f8:	89 89       	ldd	r24, Y+17	; 0x11
    18fa:	9a 89       	ldd	r25, Y+18	; 0x12
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <long_delay+0xba>
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	8b 89       	ldd	r24, Y+19	; 0x13
    1906:	9c 89       	ldd	r25, Y+20	; 0x14
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 8b       	std	Y+20, r25	; 0x14
    190c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	8b 89       	ldd	r24, Y+19	; 0x13
    1910:	9c 89       	ldd	r25, Y+20	; 0x14
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f7       	brne	.-38     	; 0x18f0 <long_delay+0xae>
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <long_delay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	6d 89       	ldd	r22, Y+21	; 0x15
    191a:	7e 89       	ldd	r23, Y+22	; 0x16
    191c:	8f 89       	ldd	r24, Y+23	; 0x17
    191e:	98 8d       	ldd	r25, Y+24	; 0x18
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	8f 87       	std	Y+15, r24	; 0x0f
    1934:	8f 85       	ldd	r24, Y+15	; 0x0f
    1936:	98 89       	ldd	r25, Y+16	; 0x10
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <long_delay+0xf6>
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		time_ms -= 100;
    1940:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1942:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1944:	84 56       	subi	r24, 0x64	; 100
    1946:	90 40       	sbci	r25, 0x00	; 0
    1948:	9e 8f       	std	Y+30, r25	; 0x1e
    194a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_PIN_WRITE(DIO_PORTB, 5, HIGH);
	long_delay(RED_RED_ALL_TIME);
}

void long_delay(uint16_t time_ms) {
	while (time_ms > 100) {
    194c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1950:	85 36       	cpi	r24, 0x65	; 101
    1952:	91 05       	cpc	r25, r1
    1954:	08 f0       	brcs	.+2      	; 0x1958 <long_delay+0x116>
    1956:	82 cf       	rjmp	.-252    	; 0x185c <long_delay+0x1a>
		_delay_ms(100);
		time_ms -= 100;
	}
	_delay_ms(time_ms);  // Delay the remaining time
    1958:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195c:	cc 01       	movw	r24, r24
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8b 87       	std	Y+11, r24	; 0x0b
    1970:	9c 87       	std	Y+12, r25	; 0x0c
    1972:	ad 87       	std	Y+13, r26	; 0x0d
    1974:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1976:	6b 85       	ldd	r22, Y+11	; 0x0b
    1978:	7c 85       	ldd	r23, Y+12	; 0x0c
    197a:	8d 85       	ldd	r24, Y+13	; 0x0d
    197c:	9e 85       	ldd	r25, Y+14	; 0x0e
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	4a ef       	ldi	r20, 0xFA	; 250
    1984:	54 e4       	ldi	r21, 0x44	; 68
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8f 83       	std	Y+7, r24	; 0x07
    1990:	98 87       	std	Y+8, r25	; 0x08
    1992:	a9 87       	std	Y+9, r26	; 0x09
    1994:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19aa:	88 23       	and	r24, r24
    19ac:	2c f4       	brge	.+10     	; 0x19b8 <long_delay+0x176>
		__ticks = 1;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <long_delay+0x1f4>
	else if (__tmp > 65535)
    19b8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ba:	78 85       	ldd	r23, Y+8	; 0x08
    19bc:	89 85       	ldd	r24, Y+9	; 0x09
    19be:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	3f ef       	ldi	r19, 0xFF	; 255
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	57 e4       	ldi	r21, 0x47	; 71
    19c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	4c f5       	brge	.+82     	; 0x1a22 <long_delay+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	40 e2       	ldi	r20, 0x20	; 32
    19de:	51 e4       	ldi	r21, 0x41	; 65
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	0f c0       	rjmp	.+30     	; 0x1a18 <long_delay+0x1d6>
    19fa:	88 ec       	ldi	r24, 0xC8	; 200
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <long_delay+0x1c4>
    1a0a:	9c 83       	std	Y+4, r25	; 0x04
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a18:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f7       	brne	.-38     	; 0x19fa <long_delay+0x1b8>
    1a20:	14 c0       	rjmp	.+40     	; 0x1a4a <long_delay+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a22:	6f 81       	ldd	r22, Y+7	; 0x07
    1a24:	78 85       	ldd	r23, Y+8	; 0x08
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	8d 81       	ldd	r24, Y+5	; 0x05
    1a38:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	9a 81       	ldd	r25, Y+2	; 0x02
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <long_delay+0x200>
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
}
    1a4a:	6e 96       	adiw	r28, 0x1e	; 30
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <__vector_1>:

ISR(INT0_vect) {
    1a5c:	1f 92       	push	r1
    1a5e:	0f 92       	push	r0
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	0f 92       	push	r0
    1a64:	11 24       	eor	r1, r1
    1a66:	8f 93       	push	r24
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
	pedestrianModeActive = 1; // Activate pedestrian mode
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	80 93 68 01 	sts	0x0168, r24
}
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	8f 91       	pop	r24
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <__vector_2>:

ISR(INT1_vect) {
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	8f 93       	push	r24
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
	pedestrianModeActive = 1; // Activate pedestrian mode
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	80 93 68 01 	sts	0x0168, r24
}
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	8f 91       	pop	r24
    1aa6:	0f 90       	pop	r0
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	0f 90       	pop	r0
    1aac:	1f 90       	pop	r1
    1aae:	18 95       	reti

00001ab0 <__prologue_saves__>:
    1ab0:	2f 92       	push	r2
    1ab2:	3f 92       	push	r3
    1ab4:	4f 92       	push	r4
    1ab6:	5f 92       	push	r5
    1ab8:	6f 92       	push	r6
    1aba:	7f 92       	push	r7
    1abc:	8f 92       	push	r8
    1abe:	9f 92       	push	r9
    1ac0:	af 92       	push	r10
    1ac2:	bf 92       	push	r11
    1ac4:	cf 92       	push	r12
    1ac6:	df 92       	push	r13
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	ca 1b       	sub	r28, r26
    1ada:	db 0b       	sbc	r29, r27
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	f8 94       	cli
    1ae0:	de bf       	out	0x3e, r29	; 62
    1ae2:	0f be       	out	0x3f, r0	; 63
    1ae4:	cd bf       	out	0x3d, r28	; 61
    1ae6:	09 94       	ijmp

00001ae8 <__epilogue_restores__>:
    1ae8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aea:	39 88       	ldd	r3, Y+17	; 0x11
    1aec:	48 88       	ldd	r4, Y+16	; 0x10
    1aee:	5f 84       	ldd	r5, Y+15	; 0x0f
    1af0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1af2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1af4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1af6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1af8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1afa:	b9 84       	ldd	r11, Y+9	; 0x09
    1afc:	c8 84       	ldd	r12, Y+8	; 0x08
    1afe:	df 80       	ldd	r13, Y+7	; 0x07
    1b00:	ee 80       	ldd	r14, Y+6	; 0x06
    1b02:	fd 80       	ldd	r15, Y+5	; 0x05
    1b04:	0c 81       	ldd	r16, Y+4	; 0x04
    1b06:	1b 81       	ldd	r17, Y+3	; 0x03
    1b08:	aa 81       	ldd	r26, Y+2	; 0x02
    1b0a:	b9 81       	ldd	r27, Y+1	; 0x01
    1b0c:	ce 0f       	add	r28, r30
    1b0e:	d1 1d       	adc	r29, r1
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	ed 01       	movw	r28, r26
    1b1c:	08 95       	ret

00001b1e <_exit>:
    1b1e:	f8 94       	cli

00001b20 <__stop_program>:
    1b20:	ff cf       	rjmp	.-2      	; 0x1b20 <__stop_program>
